from torch_geometric.utils import from_networkx
import networkx as nx
from qgraph import FeynmanList
import pennylane.numpy as np
from torch.utils.data import Dataset


class FeynmanDiagramDataset(Dataset):

    def __init__(self, the_file_path: str, the_n_elements=750):
        """
        initialization of the FeynmanDiagramDataset object
        :param: the_file_path: string with the path of the csv file from which I want to build the dataset
        :param: the_n_element: number of elements to pick randomly from the csv (number of elements of the dataset)
        :return: None
        """
        self.file_path = the_file_path
        self.n_elements = the_n_elements
        self.dataset = self.__convert_to_networkx(self.__load_dataset_from_file())

    def __len__(self):
        """
        Return the length of the entire dataset
        :return: len(self.dataset): length of the dataset
        """
        return len(self.dataset)

    def __getitem__(self, i):
        """
        Return the tuple of the i-th object of the dataset as a networkx graph object
        :param: i: i-th dataset's element I want to get access to
        :return: (from_networkx(graph), label): tuple of networkx graph and output that represents the i-th data
        """
        graph = self.dataset[i][0]
        label = self.dataset[i][1]
        return [from_networkx(graph), label]

    def __load_dataset_from_file(self):
        """
        Convert the FeynmanList into a list of randomly chosen elements with
        length = self.n_elements
        :return: q_dataset: list of elements of the dataset in the format (features, label)
        """
        the_dataset = FeynmanList(the_filename_path=self.file_path)
        el_index = np.random.choice(range(len(the_dataset)), self.n_elements, replace=False).astype(int)
        the_q_dataset = [the_dataset[int(idx)] for idx in el_index]
        return the_q_dataset

    def __convert_to_networkx(self, the_dataset):
        """
        Convert the FeynmanList in a more standardized form
        :param: the_dataset: dataset generated by the FeynmanList function
        :return: the_graph_dataset: list of elements of the dataset in the format (graph, label)
        """
        the_graph_dataset = []

        for the_data in the_dataset:
            G = nx.DiGraph(scattering=the_data[6], p_norm=the_data[4], theta=the_data[5])
            for node in range(len(the_data[0])):
                # current_state = np.array(the_data[0][node])
                # assert current_state in [np.array([1, 0, 0], [0, 1, 0], [0, 0, 1])]
                G.add_node(node, state=the_data[0][node])
            for edge, attr in zip(the_data[1], the_data[2]):
                G.add_edge(int(edge[0]), int(edge[1]), mass=attr[0], spin=attr[1], charge=attr[2])

            label = the_data[3]
            the_graph_dataset.append([G, label])

        return the_graph_dataset